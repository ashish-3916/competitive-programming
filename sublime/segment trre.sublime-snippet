<snippet>
	<content><![CDATA[
/*
int arr[n];
int size=4*(n);
    int seg[size];
    buildTree(seg,arr,1,0,n-1);
    updateTree(seg,arr,1,0,n-1,idx, val)
    int ans=query(seg,1,0,n-1,l,r);
*/
void buildTree(int seg[], int arr[], int si, int ss, int se) //building minimum seg tree
{
    if (ss == se)
    {
        seg[si] = arr[ss];
        return;
    }
    int mid = (ss + se) / 2;
    buildTree(seg, arr, 2 * si, ss, mid);
    buildTree(seg, arr, 2 * si + 1, mid + 1, se);

    seg[si] = (seg[2 * si] + seg[2 * si + 1]);
}
void updateTree(int seg[] , int arr[], int si , int ss , int se , int idx , int val)
{
    if (ss == se)
    {
        arr[idx] = val;
        seg[si] = val;
        return;
    }
    int mid = (ss + se) / 2;
    if (idx <= mid)
        updateTree(seg, arr, 2 * si, ss, mid, idx , val);
    else
        updateTree(seg, arr, 2 * si + 1, mid + 1, se , idx , val);

    seg[si] = (seg[2 * si] + seg[2 * si + 1]);

}
int query(int seg[], int si, int ss , int se, int qs, int qe) // obv ss<=qs<=qe<=se
{
    if (qe < ss || qs > se) //completly outside
        return 0;
    if (ss >= qs && se <= qe) //complety inside        qs   ss------se   qe
    {
        return seg[si];
    }
    int mid = (ss + se) / 2;
    int l = query(seg, 2 * si , ss, mid, qs, qe);
    int r = query(seg, 2 * si + 1, mid + 1, se, qs, qe);
    return (l + r);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment-tree</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
