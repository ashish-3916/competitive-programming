left shift :  x<<i     ---> x = x*(2^i)

right shift :  x>>i    ---> x = floor(x/(2^i))

AND :  x&0= 0    x&1 = x

OR :   x|0= x    x|1 = 1

XOR :  x^0= x    x^1 = ~x               flip with 1 , same with 0

NOT : complement

check ith bit :  n &(1<<i)   if non zero bit is set

set ith bit   : n | 1<<i

unset ith bit : if bit is set  n^ 1<<i

if(n&1) -> odd  

if((n & n-1)==0) ->power of 2

0000101010111100000000 ->  n
1111010101000100000000 ->  -n    ie 2s complements   (~n + 1) 
 flip bits   |all same
 
 n&-n ->  first set bit 
 location - > log2(n&-n) + 1
